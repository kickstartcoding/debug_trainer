{"version":3,"sources":["ports/print.ts","ports/printAndExitFailure.ts","ports/printAndExitSuccess.ts","logging.ts","ports/readFile.ts","ports/writeFile.ts","ports/exitSuccess.ts","../tests_end_to_end/testHelpers.ts","savedData.ts","main.ts"],"names":[],"mappings":";;;AAAA,aAAA,SAAA,EAAyB,GACvB,EAAQ,MAAM,MAAM,UAAU,SAAA,GAC5B,QAAQ,IAAI,KAFhB,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA;;ACAA,aAAA,SAAA,EAAyB,GACvB,EAAQ,MAAM,oBAAoB,UAAU,SAAA,GAC1C,QAAQ,MAAM,GACd,QAAQ,KAAK,KAHjB,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA;;ACAA,aAAA,SAAA,EAAyB,GACvB,EAAQ,MAAM,oBAAoB,UAAU,SAAA,GAC1C,QAAQ,IAAI,GACZ,QAAQ,KAAK,KAHjB,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA;;ACEA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,EAFA,IAAM,EAAuB,QAAQ,KAAK,SAAS,UAAY,QAAQ,KAAK,SAAS,MAErF,SAAgB,IAAO,IAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,EAAA,GAAA,UAAA,GACjB,IACF,EAAS,GAAK,eAAe,EAAS,GACtC,QAAQ,IAAG,MAAX,QAAe,IAHnB,QAAA,OAAA;;ACCA,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAHA,IAAA,EAAA,EAAA,QAAA,OACQ,EAAW,QAAQ,cAAa,OAExC,SAAA,EAAyB,GACvB,EAAQ,MAAM,SAAS,UAAU,SAAC,GAChC,EAAO,sBAAsB,EAAQ,OACrC,EAAA,QAAG,SAAS,EAAU,OAAQ,SAAU,EAAK,GACvC,IACF,QAAQ,MAAM,GACd,QAAQ,KAAK,IAGf,EAAQ,MAAM,mBAAmB,KAAK,CAAE,KAAM,EAAU,QAAS,QATvE,QAAA,QAAA;;ACsBC,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAzBD,IAAA,EAAA,EAAA,QAAA,OACA,EAAA,QAAA,cAEA,SAAA,EAAyB,GACvB,EAAQ,MAAM,UAAU,UAAU,SAAC,GACjC,EAAmB,EAAS,MAE5B,EAAA,OAAO,0BAA0B,EAAS,KAAI,OAC9C,EAAA,QAAG,UAAU,EAAS,KAAM,EAAS,QAAS,SAAU,GAClD,IACF,QAAQ,MAAM,GACd,QAAQ,KAAK,IAGf,EAAA,OAAO,6BAEP,EAAQ,MAAM,oBAAoB,KAAK,OAK7C,SAAS,EAAmB,GACrB,EAAA,QAAG,WAAW,IACjB,EAAA,QAAG,UAAU,EAAA,QAAG,SAAS,EAAU,MApBvC,QAAA,QAAA;;ACCA,aAAA,SAAA,EAAyB,GACvB,EAAQ,MAAM,YAAY,UAAU,WAAY,OAAA,QAAQ,KAAK,KAD/D,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA;;ACwCA,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,cAAA,QAAA,cAAA,QAAA,aAAA,QAAA,0BAAA,QAAA,gBAAA,QAAA,sBAAA,QAAA,yBAAA,QAAA,wBAAA,QAAA,gBAAA,QAAA,aAAA,QAAA,kBAAA,EA5CA,IAAA,EAAA,EAAA,QAAA,OACA,EAAA,QAAA,iBAKA,SAAgB,IACP,OAAA,EAAW,SAAS,QAAA,cAG7B,SAAgB,IACP,OAAA,EAAW,mBAAmB,QAAA,cAGvC,SAAgB,IACP,OAAA,EAAW,aAAa,QAAA,cAGjC,SAAgB,IACP,OAAA,EAAW,WAAW,QAAA,cAG/B,SAAgB,IACP,OAAA,EAAW,SAAS,QAAA,cAG7B,SAAS,EAAW,GACX,OAAA,EAAA,SAAS,4BAA4B,EAAO,WAAW,WAGhE,SAAgB,EAA0B,GACxC,EAAA,QAAG,cAAc,QAAA,aAAc,GAGjC,SAAgB,IACP,OAAA,EAAA,QAAG,aAAa,QAAA,aAAc,QAGvC,SAAgB,IACV,EAAA,QAAG,WAAW,QAAA,eAChB,EAAA,QAAG,WAAW,QAAA,cAIlB,SAAgB,IACV,EAAA,QAAG,WAAW,QAAA,eAChB,EAAA,QAAG,WAAW,QAAA,cA3CL,QAAA,aAAuB,eACvB,QAAA,aAAuB,oCAEpC,QAAA,gBAAA,EAIA,QAAA,wBAAA,EAIA,QAAA,yBAAA,EAIA,QAAA,sBAAA,EAIA,QAAA,gBAAA,EAQA,QAAA,0BAAA,EAIA,QAAA,aAAA,EAIA,QAAA,cAAA,EAMA,QAAA,cAAA;;ACpCA,aAAA,IAAA,EAAA,MAAA,KAAA,kBAAA,OAAA,OAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,GAAA,OAAA,eAAA,EAAA,EAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,OAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,KAAA,qBAAA,OAAA,OAAA,SAAA,EAAA,GAAA,OAAA,eAAA,EAAA,UAAA,CAAA,YAAA,EAAA,MAAA,KAAA,SAAA,EAAA,GAAA,EAAA,QAAA,IAAA,EAAA,MAAA,KAAA,cAAA,SAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,MAAA,EAAA,IAAA,IAAA,KAAA,EAAA,YAAA,GAAA,OAAA,eAAA,KAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,OAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,KAAA,QAAA,kBAAA,EARA,IAAA,EAAA,EAAA,QAAA,OACA,EAAA,EAAA,QAAA,OACA,EAAA,QAAA,aACA,EAAA,EAAA,QAAA,oCAKA,SAAgB,IAEV,OADJ,EAAA,OAAO,qBAAqB,QAAA,aAAY,OACpC,EAAA,QAAG,WAAW,QAAA,cACT,EAAA,QAAG,aAAa,QAAA,aAAc,QAE9B,KARE,QAAA,aAAuB,QAAQ,KAAK,SAAS,UACxD,EAAY,aAAkB,EAAA,QAAG,UAAS,uBAE5C,QAAA,KAAA;;ACoCC,aAAA,IAAA,EAAA,MAAA,KAAA,kBAAA,OAAA,OAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,GAAA,OAAA,eAAA,EAAA,EAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,OAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,KAAA,qBAAA,OAAA,OAAA,SAAA,EAAA,GAAA,OAAA,eAAA,EAAA,UAAA,CAAA,YAAA,EAAA,MAAA,KAAA,SAAA,EAAA,GAAA,EAAA,QAAA,IAAA,EAAA,MAAA,KAAA,cAAA,SAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,MAAA,EAAA,IAAA,IAAA,KAAA,EAAA,YAAA,GAAA,OAAA,eAAA,KAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,OAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,gBAAA,WAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,GAAA,UAAA,GAAA,OAAA,IAAA,EAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,IAAA,IAAA,EAAA,UAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA5CD,QAAA,SAAA,EACA,IAAA,EAAA,QAAA,mBACA,EAAA,EAAA,QAAA,kBACA,EAAA,EAAA,QAAA,gCACA,EAAA,EAAA,QAAA,gCACA,EAAA,EAAA,QAAA,qBACA,EAAA,EAAA,QAAA,sBACA,EAAA,EAAA,QAAA,wBACA,EAAA,EAAA,QAAA,gBACA,EAAA,QAAA,aAEA,SAAgB,IACR,IAAA,EAAe,EAAU,OAC/B,EAAA,OAAM,WAAA,EAAA,EAAA,CAAC,iBAAoB,QAAQ,OACnC,EAAA,OAAO,QAAS,GAEV,IAAA,EAAU,EAAA,IAAI,KAAK,KAAK,CAC5B,MAAO,CACL,KAAM,QAAQ,KACd,cAAe,EAAa,KAC5B,cAAe,EAAa,KAC5B,aAAc,EAAU,aACxB,iBAAkB,QAAQ,MAC1B,KAAM,EACN,eAAgB,WAI0B,CAC5C,EAAA,QACA,EAAA,QACA,EAAA,QACA,EAAA,QACA,EAAA,QACA,EAAA,SAGY,QAAQ,SAAU,GAC9B,EAAkB,KAItB,SAAS,EAAa,GACb,OAAA,KAAK,MAAM,KAAK,SAAW,KAAK,MAAM,IAhC/C,QAAA,IAAA","file":"debug_trainer.js","sourceRoot":"../js","sourcesContent":["export default function (program): void {\n  program.ports.print.subscribe(message => {\n    console.log(message)\n  })\n}","export default function (program): void {\n  program.ports.printAndExitFailure.subscribe(message => {\n    console.error(message)\n    process.exit(1)\n  })\n}","export default function (program): void {\n  program.ports.printAndExitSuccess.subscribe(message => {\n    console.log(message)\n    process.exit(0)\n  })\n}","const loggingIsOn: boolean = process.argv.includes('--log') || process.argv.includes('-l')\n\nexport function devLog(...messages: string[]): void {\n  if (loggingIsOn) {\n    messages[0] = `[dev info]: ${messages[0]}`\n    console.log(...messages)\n  }\n}","import fs from 'fs'\nconst { devLog } = require('../logging')\n\nexport default function (program): void {\n  program.ports.readFile.subscribe((filepath: string): void => {\n    devLog(`Reading content of ${filepath}...`)\n    fs.readFile(filepath, 'utf8', function (err, content) {\n      if (err) {\n        console.error(err)\n        process.exit(1)\n      }\n\n      program.ports.successfulFileRead.send({ path: filepath, content: content })\n    });\n\n  });\n}","import fs from 'fs'\nimport { devLog } from '../logging'\n\nexport default function (program): void {\n  program.ports.writeFile.subscribe((fileData: { path: string, content: string }): void => {\n    createFileIfAbsent(fileData.path)\n\n    devLog(`Writing new content of ${fileData.path}...`)\n    fs.writeFile(fileData.path, fileData.content, function (err) {\n      if (err) {\n        console.error(err)\n        process.exit(1)\n      }\n\n      devLog('New file content written!');\n\n      program.ports.successfulFileWrite.send(fileData)\n    })\n  })\n}\n\nfunction createFileIfAbsent(filepath: string): void {\n  if (!fs.existsSync(filepath)) {\n    fs.closeSync(fs.openSync(filepath, 'w'))\n  }\n}","import fs from 'fs'\nimport * as SavedData from '../savedData'\nimport { devLog } from '../logging'\n\nexport default function (program): void {\n  program.ports.exitSuccess.subscribe((): void => process.exit(0))\n}","import fs from 'fs'\nimport { execSync } from 'child_process'\n\nexport const testFileName: string = \"testfile.txt\"\nexport const dataFileName: string = \"debug_trainer_test_save_file.json\"\n\nexport function runBreakCommand(): string {\n  return runCommand(`break ${testFileName}`)\n}\n\nexport function runErrorTypeHintCommand(): string {\n  return runCommand(`error-type-hint ${testFileName}`)\n}\n\nexport function runLineNumberHintCommand(): string {\n  return runCommand(`line-hint ${testFileName}`)\n}\n\nexport function runLineExplainCommand(): string {\n  return runCommand(`explain ${testFileName}`)\n}\n\nexport function runResetCommand(): string {\n  return runCommand(`reset ${testFileName}`)\n}\n\nfunction runCommand(command: string): string {\n  return execSync(`node ./bin/debug_trainer ${command} --test`).toString()\n}\n\nexport function createTestFileWithContent(content: string): void {\n  fs.writeFileSync(testFileName, content)\n}\n\nexport function readTestFile(): string {\n  return fs.readFileSync(testFileName, 'utf8')\n}\n\nexport function clearSaveFile(): void {\n  if (fs.existsSync(dataFileName)) {\n    fs.unlinkSync(dataFileName)\n  }\n}\n\nexport function clearTestFile(): void {\n  if (fs.existsSync(testFileName)) {\n    fs.unlinkSync(testFileName)\n  }\n}","import fs from 'fs'\nimport os from 'os'\nimport { devLog } from './logging'\nimport * as TestHelpers from '../tests_end_to_end/testHelpers'\n\nexport const dataFilePath: string = process.argv.includes('--test') ?\n  TestHelpers.dataFileName : `${os.homedir()}/.debug_trainer.json`\n\nexport function load(): string | null {\n  devLog(`Loading data from ${dataFilePath}...`);\n  if (fs.existsSync(dataFilePath)) {\n    return fs.readFileSync(dataFilePath, 'utf8');\n  } else {\n    return null\n  }\n}\n","// @ts-ignore\nimport { Elm } from '../elm/Main.elm'\nimport print from './ports/print'\nimport printAndExitFailure from './ports/printAndExitFailure'\nimport printAndExitSuccess from './ports/printAndExitSuccess'\nimport readFile from './ports/readFile'\nimport writeFile from './ports/writeFile'\nimport exitSuccess from './ports/exitSuccess'\nimport * as SavedData from './savedData'\nimport { devLog } from './logging'\n\nexport function run(): void {\n  const data: string = SavedData.load()\n  devLog('process.argv:', ...process.argv)\n  devLog('data:', data)\n\n  const program = Elm.Main.init({\n    flags: {\n      argv: process.argv,\n      randomNumber1: getRandomInt(1_000_000),\n      randomNumber2: getRandomInt(1_000_000),\n      dataFilePath: SavedData.dataFilePath,\n      workingDirectory: process.cwd(),\n      data: data,\n      versionMessage: \"5.0.1\"\n    }\n  })\n\n  const portFunctions: ((arg0: any) => any)[] = [\n    print,\n    printAndExitFailure,\n    printAndExitSuccess,\n    exitSuccess,\n    readFile,\n    writeFile\n  ]\n\n  portFunctions.forEach(function (portSetupFunction) {\n    portSetupFunction(program)\n  })\n}\n\nfunction getRandomInt(max: number): number {\n  return Math.floor(Math.random() * Math.floor(max))\n}"]}
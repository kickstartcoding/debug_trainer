{"version":3,"sources":["ports/print.ts","ports/printAndExitFailure.ts","ports/printAndExitSuccess.ts","logging.ts","ports/readFile.ts","../tests_end_to_end/testHelpers.ts","savedData.ts","ports/writeFile.ts","main.ts"],"names":[],"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","file":"debug_trainer.js","sourceRoot":"../js","sourcesContent":["export default function (program): void {\n  program.ports.print.subscribe(message => {\n    console.log(message)\n  })\n}","export default function (program): void {\n  program.ports.printAndExitFailure.subscribe(message => {\n    console.error(message)\n    process.exit(1)\n  })\n}","export default function (program): void {\n  program.ports.printAndExitSuccess.subscribe(message => {\n    console.log(message)\n    process.exit(0)\n  })\n}","const loggingIsOn: boolean = process.argv.includes('--log') || process.argv.includes('-l')\n\nexport function devLog(...messages: string[]): void {\n  if (loggingIsOn) {\n    messages[0] = `[dev info]: ${messages[0]}`\n    console.log(...messages)\n  }\n}","import fs from 'fs'\nconst { devLog } = require('../logging')\n\nexport default function (program): void {\n  program.ports.readFile.subscribe(filepath => {\n    devLog(`Reading contents of ${filepath}...`)\n    fs.readFile(filepath, 'utf8', function (err, contents) {\n      if (err) {\n        console.error(err)\n        process.exit(1)\n      }\n\n      program.ports.receiveFileContents.send(contents)\n    })\n  })\n}","import fs from 'fs'\nimport { execSync } from 'child_process'\n\nexport const testFileName: string = \"testfile.txt\"\nexport const dataFileName: string = \"debug_trainer_test_save_file.json\"\n\nexport function runBreakCommand(): string {\n  return runCommand(`break ${testFileName}`)\n}\n\nexport function runHintCommand(hintNumber?: number): string {\n  if (hintNumber) {\n    return runCommand(`hint --hint-number ${hintNumber} ${testFileName}`)\n  } else {\n    return runCommand(`hint ${testFileName}`)\n  }\n}\n\nexport function runResetCommand(): string {\n  return runCommand(`reset ${testFileName}`)\n}\n\nfunction runCommand(command: string): string {\n  return execSync(`node ./bin/debug_trainer ${command} --test`).toString()\n}\n\nexport function createTestFileWithContent(content: string): void {\n  fs.writeFileSync(testFileName, content)\n}\n\nexport function readTestFile(): string {\n  return fs.readFileSync(testFileName, 'utf8')\n}\n\nexport function clearSaveFile(): void {\n  if (fs.existsSync(dataFileName)) {\n    fs.unlinkSync(dataFileName)\n  }\n}\n\nexport function clearTestFile() {\n  if (fs.existsSync(testFileName)) {\n    fs.unlinkSync(testFileName)\n  }\n}","import fs from 'fs'\nimport os from 'os'\nimport { devLog } from './logging'\nimport * as TestHelpers from '../tests_end_to_end/testHelpers'\n\nexport const dataFilePath: string = process.argv.includes('--test') ?\n  TestHelpers.dataFileName : `${os.homedir()}/.debug_trainer.json`\n\nexport function load(): string | null {\n  devLog(`Loading data from ${dataFilePath}...`);\n  if (fs.existsSync(dataFilePath)) {\n    return fs.readFileSync(dataFilePath, 'utf8');\n  } else {\n    return null\n  }\n}\n\nexport function save(saveDataContents) {\n  devLog(`Saving data to ${dataFilePath}...`);\n  if (!fs.existsSync(dataFilePath)) {\n    fs.closeSync(fs.openSync(dataFilePath, 'w'))\n  }\n  const contents = JSON.stringify(saveDataContents, null, \"  \")\n  fs.writeFile(dataFilePath, contents, function (err) {\n    // console.log('contents:', contents)\n\n    if (err) {\n      console.error(err)\n      process.exit(1);\n    }\n    devLog('Data successfully saved!');\n\n    process.exit(0);\n  });\n}\n","import fs from 'fs'\nimport * as SavedData from '../savedData'\nimport { devLog } from '../logging'\n\nexport default function (program): void {\n  program.ports.writeFile.subscribe(fileData => {\n    devLog(`Writing new contents of ${fileData.path}...`)\n    fs.writeFile(fileData.path, fileData.contents, function (err) {\n      if (err) {\n        console.error(err)\n        process.exit(1)\n      }\n\n      devLog('New file contents written!')\n      SavedData.save(fileData.dataToSave)\n\n      // console.log('Good luck debugging!')\n      // process.exit(0)\n    })\n  })\n}\n","// @ts-ignore\nimport { Elm } from '../elm/Main.elm'\nimport print from './ports/print'\nimport printAndExitFailure from './ports/printAndExitFailure'\nimport printAndExitSuccess from './ports/printAndExitSuccess'\nimport readFile from './ports/readFile'\nimport writeFile from './ports/writeFile'\nimport * as SavedData from './savedData'\nimport { devLog } from './logging'\n\nexport function run(): void {\n  const data: string = SavedData.load()\n  devLog('process.argv:', ...process.argv)\n  devLog('data:', data)\n\n  const program = Elm.Main.init({\n    flags: {\n      argv: process.argv,\n      randomNumber1: getRandomInt(1_000_000),\n      randomNumber2: getRandomInt(1_000_000),\n      dataFilePath: SavedData.dataFilePath,\n      workingDirectory: process.cwd(),\n      data: data,\n      versionMessage: \"3.2.0\"\n    }\n  })\n\n  const portFunctions: ((arg0: any) => any)[] = [\n    print,\n    printAndExitFailure,\n    printAndExitSuccess,\n    readFile,\n    writeFile\n  ]\n\n  portFunctions.forEach(function (portSetupFunction) {\n    portSetupFunction(program)\n  })\n}\n\nfunction getRandomInt(max: number): number {\n  return Math.floor(Math.random() * Math.floor(max))\n}"]}
{"version":3,"sources":["ports/print.js","ports/printAndExitFailure.js","ports/printAndExitSuccess.js","logging.js","ports/readFile.js","../tests_end_to_end/testHelpers.js","savedData.js","ports/writeFile.js","main.js"],"names":["program","ports","print","subscribe","message","console","log","printAndExitFailure","error","process","exit","printAndExitSuccess","loggingIsOn","argv","includes","devLog","messages","require","readFile","filepath","err","contents","receiveFileContents","send","testFileName","dataFileName","runBreakCommand","runCommand","runHintCommand","hintNumber","runResetCommand","command","toString","createTestFileWithContent","content","writeFileSync","readTestFile","fs","readFileSync","clearSaveFile","existsSync","unlinkSync","clearTestFile","dataFilePath","TestHelpers","os","homedir","load","save","saveDataContents","closeSync","openSync","JSON","stringify","writeFile","fileData","path","SavedData","dataToSave","run","data","Elm","Main","init","flags","randomNumber1","getRandomInt","randomNumber2","workingDirectory","cwd","versionMessage","forEach","portSetupFunction","max","Math","floor","random"],"mappings":"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","file":"debug_trainer.js","sourceRoot":"../js","sourcesContent":["export default function (program) {\n  program.ports.print.subscribe(message => {\n    console.log(message)\n  });\n}","export default function (program) {\n  program.ports.printAndExitFailure.subscribe(message => {\n    console.error(message);\n    process.exit(1);\n  });\n}","export default function (program) {\n  program.ports.printAndExitSuccess.subscribe(message => {\n    console.log(message);\n    process.exit(0);\n  });\n}","const loggingIsOn = process.argv.includes('--log') || process.argv.includes('-l')\n\nexport function devLog(...messages) {\n  if (loggingIsOn) {\n    messages[0] = `[dev info]: ${messages[0]}`\n    console.log(...messages)\n  }\n}","import fs from 'fs'\nconst { devLog } = require('../logging.js')\n\nexport default function (program) {\n  program.ports.readFile.subscribe(filepath => {\n    devLog(`Reading contents of ${filepath}...`);\n    fs.readFile(filepath, 'utf8', function (err, contents) {\n      if (err) {\n        console.error(err)\n        process.exit(1);\n      }\n\n      program.ports.receiveFileContents.send(contents)\n    });\n\n  });\n}","import fs from 'fs'\nimport { execSync } from 'child_process'\n\nexport const testFileName = \"testfile.txt\"\nexport const dataFileName = \"debug_trainer_test_save_file.json\"\n\nexport function runBreakCommand() {\n  return runCommand(`break ${testFileName}`)\n}\n\nexport function runHintCommand(hintNumber) {\n  if (hintNumber) {\n    return runCommand(`hint --hint-number ${hintNumber} ${testFileName}`)\n  } else {\n    return runCommand(`hint ${testFileName}`)\n  }\n}\n\nexport function runResetCommand() {\n  return runCommand(`reset ${testFileName}`)\n}\n\nfunction runCommand(command) {\n  return execSync(`node ./bin/debug_trainer ${command} --test`).toString()\n}\n\nexport function createTestFileWithContent(content) {\n  fs.writeFileSync(testFileName, content, function (err) {\n    if (err) {\n      console.error(err)\n      process.exit(1)\n    }\n  })\n}\n\nexport function readTestFile() {\n  return fs.readFileSync(testFileName, 'utf8')\n}\n\nexport function clearSaveFile() {\n  if (fs.existsSync(dataFileName)) {\n    fs.unlinkSync(dataFileName)\n  }\n}\n\nexport function clearTestFile() {\n  if (fs.existsSync(testFileName)) {\n    fs.unlinkSync(testFileName)\n  }\n}","import fs from 'fs'\nimport os from 'os'\nimport { devLog } from './logging.js'\nimport * as TestHelpers from '../tests_end_to_end/testHelpers.js'\n\nexport const dataFilePath = process.argv.includes('--test') ?\n  TestHelpers.dataFileName : `${os.homedir()}/.debug_trainer.json`\n\nexport function load(program) {\n  devLog(`Loading data from ${dataFilePath}...`);\n  if (fs.existsSync(dataFilePath)) {\n    return fs.readFileSync(dataFilePath, 'utf8');\n  } else {\n    return null\n  }\n}\n\nexport function save(saveDataContents) {\n  devLog(`Saving data to ${dataFilePath}...`);\n  if (!fs.existsSync(dataFilePath)) {\n    fs.closeSync(fs.openSync(dataFilePath, 'w'))\n  }\n  const contents = JSON.stringify(saveDataContents, null, \"  \")\n  fs.writeFile(dataFilePath, contents, function (err) {\n    // console.log('contents:', contents)\n\n    if (err) {\n      console.error(err)\n      process.exit(1);\n    }\n    devLog('Data successfully saved!');\n\n    process.exit(0);\n  });\n}\n","import fs from 'fs'\nimport * as SavedData from '../savedData.js'\nimport { devLog } from '../logging.js'\n\nexport default function (program) {\n  program.ports.writeFile.subscribe(fileData => {\n    devLog(`Writing new contents of ${fileData.path}...`);\n    fs.writeFile(fileData.path, fileData.contents, function (err) {\n      if (err) {\n        console.error(err)\n        process.exit(1);\n      }\n\n      devLog('New file contents written!');\n      SavedData.save(fileData.dataToSave)\n\n      // console.log('Good luck debugging!');\n      // process.exit(0);\n    });\n  });\n}\n","import { Elm } from '../elm/Main.elm'\nimport print from './ports/print.js'\nimport printAndExitFailure from './ports/printAndExitFailure.js'\nimport printAndExitSuccess from './ports/printAndExitSuccess.js'\nimport readFile from './ports/readFile.js'\nimport writeFile from './ports/writeFile.js'\nimport * as SavedData from './savedData.js'\nimport { devLog } from './logging.js'\n\nexport function run() {\n  const data = SavedData.load()\n  devLog('process.argv:', process.argv)\n  devLog('data:', data)\n\n  const program = Elm.Main.init({\n    flags: {\n      argv: process.argv,\n      randomNumber1: getRandomInt(1_000_000),\n      randomNumber2: getRandomInt(1_000_000),\n      dataFilePath: SavedData.dataFilePath,\n      workingDirectory: process.cwd(),\n      data: data,\n      versionMessage: \"3.2.0\"\n    }\n  })\n\n  const portFunctions = [\n    print,\n    printAndExitFailure,\n    printAndExitSuccess,\n    readFile,\n    writeFile\n  ]\n\n  portFunctions.forEach(function (portSetupFunction) {\n    portSetupFunction(program)\n  })\n}\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max))\n}"]}
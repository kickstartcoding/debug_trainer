{"version":3,"sources":["main.js"],"names":["run","data","SavedData","load","process","argv","program","Elm","Main","init","flags","randomNumber1","getRandomInt","randomNumber2","dataFilePath","workingDirectory","cwd","versionMessage","portFunctions","print","printAndExitFailure","printAndExitSuccess","readFile","writeFile","forEach","portSetupFunction","max","Math","floor","random"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEO,SAASA,GAAT,GAAe;AACpB,QAAMC,IAAI,GAAGC,SAAS,CAACC,IAAV,EAAb;AACA,uBAAO,eAAP,EAAwBC,OAAO,CAACC,IAAhC;AACA,uBAAO,OAAP,EAAgBJ,IAAhB;;AAEA,QAAMK,OAAO,GAAGC,UAAIC,IAAJ,CAASC,IAAT,CAAc;AAC5BC,IAAAA,KAAK,EAAE;AACLL,MAAAA,IAAI,EAAED,OAAO,CAACC,IADT;AAELM,MAAAA,aAAa,EAAEC,YAAY,CAAC,OAAD,CAFtB;AAGLC,MAAAA,aAAa,EAAED,YAAY,CAAC,OAAD,CAHtB;AAILE,MAAAA,YAAY,EAAEZ,SAAS,CAACY,YAJnB;AAKLC,MAAAA,gBAAgB,EAAEX,OAAO,CAACY,GAAR,EALb;AAMLf,MAAAA,IAAI,EAAEA,IAND;AAOLgB,MAAAA,cAAc,EAAE;AAPX;AADqB,GAAd,CAAhB;;AAYA,QAAMC,aAAa,GAAG,CACpBC,cADoB,EAEpBC,4BAFoB,EAGpBC,4BAHoB,EAIpBC,iBAJoB,EAKpBC,kBALoB,CAAtB;AAQAL,EAAAA,aAAa,CAACM,OAAd,CAAsB,UAAUC,iBAAV,EAA6B;AACjDA,IAAAA,iBAAiB,CAACnB,OAAD,CAAjB;AACD,GAFD;AAGD;;AAED,SAASM,YAAT,CAAsBc,GAAtB,EAA2B;AACzB,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBF,IAAI,CAACC,KAAL,CAAWF,GAAX,CAA3B,CAAP;AACD","file":"debug_trainer.js","sourceRoot":"../js","sourcesContent":["import { Elm } from '../elm/Main.elm'\nimport print from './ports/print.js'\nimport printAndExitFailure from './ports/printAndExitFailure.js'\nimport printAndExitSuccess from './ports/printAndExitSuccess.js'\nimport readFile from './ports/readFile.js'\nimport writeFile from './ports/writeFile.js'\nimport * as SavedData from './savedData.js'\nimport { devLog } from './logging.js'\n\nexport function run() {\n  const data = SavedData.load()\n  devLog('process.argv:', process.argv)\n  devLog('data:', data)\n\n  const program = Elm.Main.init({\n    flags: {\n      argv: process.argv,\n      randomNumber1: getRandomInt(1_000_000),\n      randomNumber2: getRandomInt(1_000_000),\n      dataFilePath: SavedData.dataFilePath,\n      workingDirectory: process.cwd(),\n      data: data,\n      versionMessage: \"3.1.0\"\n    }\n  })\n\n  const portFunctions = [\n    print,\n    printAndExitFailure,\n    printAndExitSuccess,\n    readFile,\n    writeFile\n  ]\n\n  portFunctions.forEach(function (portSetupFunction) {\n    portSetupFunction(program)\n  })\n}\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max))\n}"]}